type User {
    id: String!
    firstName: String!
    lastName: String!
}

# All fields are optional, the ID is deliberately omitted.
input UserPatch {
    firstName: String
    lastName: String
}

type Symbol {
    currency: String!
    marketClose: String!
    marketOpen: String!
    name: String!
    region: String!
    symbol: String!
    timezone: String!
    type: String!
}

type PossibleSymbol {
    currency: String!
    marketClose: String!
    marketOpen: String!
    matchScore: Float!
    name: String!
    region: String!
    symbol: String!
    timezone: String!
    type: String!
}

type PossibleSymbols {
    symbols: [PossibleSymbol!]!
}

union SearchSymbolResult = Symbol | PossibleSymbols

enum SubscriptionUpdateType {
    CREATE
    UPDATE
    DELETE
}

type UserSubscription {
    updateType: SubscriptionUpdateType!
    user: User!
}

type Mutation {
    createUser(
        firstName: String!
        lastName: String!
    ): User

    # Will return null if the user does not exist.
    deleteUser(id: String!): User

    # Warning: deletes all users!
    deleteUsers: [User!]!

    updateUser(
        id: String!
        patch: UserPatch!
    ): User

    # Finds details of the symbol, or a list of potential symbols from Alpha Vantage.
    # Mutates as it will cache an uncached, exact-matching symbol, for faster retrieval next time.
    searchSymbol(symbol: String!): SearchSymbolResult!
}

type Query {
    users: [User!]!
}

type Subscription {
    userUpdated: UserSubscription!
}
